# Agent = DaemonSet
# Aggregator = StatefulSet
# Stateless-Aggregator = Deployment
role: "Agent"

rollWorkload: true

service:
  ports:
    - name: http
      port: 9090

customConfig:
  data_dir: /var/lib/vector
  sources:
    syslog:
      type: file
      include:
        - /var/log/syslog
      ignore_older: 86400
      read_from: "beginning"
    auth:
      type: file
      include:
        - /var/log/auth.log
      ignore_older: 86400
      read_from: "beginning"
    kern:
      type: file
      include:
        - /var/log/kern.log
      ignore_older: 86400
      read_from: "beginning"
    # bash_history:
    #   type: file
    #   include:
    #     - /var/log/commands.log
    #   ignore_older: 86400
    #   read_from: "beginning"
    dmesg:
      type: file
      include:
        - /var/log/dmesg
      ignore_older: 86400
      read_from: "beginning"
    dpkg:
      type: file
      include:
        - /var/log/dpkg.log
      ignore_older: 86400
      read_from: "beginning"
    bash_history:
        type: file
        include:
          - /var/log/commands.log
        ignore_older: 86400
        read_from: 'beginning'
    k8s:
      type: "kubernetes_logs"
      timezone: "local"
      auto_partial_merge: true
  transforms:
    process_syslog:
      type: remap
      inputs: [syslog]
      source: |-
        structured = parse_syslog!(.message)
        . = merge(., structured)
        .timestamp = to_unix_timestamp!(.timestamp)
        del(.timestamp)
        del(.host)
        del(.file)
        del(.source_type)
        .log_type = "syslog"
        .project = "local-test"
    process_auth:
      type: remap
      inputs: [auth]
      source: |-
        structured = parse_regex(.message, r'^(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}\+\d{2}:\d{2}) (?P<hostname>[^\s]+) (?P<process>[^\[\s]+)(?:\[\d+\])?: (?P<message>.+)$') ?? {}
        . = merge(., structured)
        del(.pid)
        del(.file)
        del(.source_type)
        del(.host)
        .log_type = "auth"
        .project = "local-test"
    process_kern:
      type: remap
      inputs: [kern]
      source: |-
        structured = parse_regex(.message, r'^(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}\+\d{2}:\d{2})\s+(?P<hostname>[^\s]+)\s+(?P<process>[^:]+):\s*(?P<message>.*)$') ?? {}
        . = merge(., structured)
        del(.file)
        del(.source_type)
        del(.host)
        .log_type = "kern"
        .project = "local-test"
    process_dmesg:
      type: remap
      inputs: [dmesg]
      source: |-
        structured = parse_regex(.message, r'^(?P<timestamp>\w{3} \d{2} \d{2}:\d{2}:\d{2}) (?P<message>.*)$') ?? {}
        . = merge(., structured)
        del(.file)
        del(.source_type)
        .log_type = "dmesg"
        .project = "local-test"
    process_dpkg:
      type: remap
      inputs: [dpkg]
      source: |-
        structured = parse_regex(.message, r'^(?P<timestamp>[^ ]+ [^ ]+) (?P<action>[^ ]+) (?P<package>[^ ]+:amd64)? ?(?P<previous_version>[^ ]+)? ?(?P<version>[^ ]+)?$') ?? {}
        . = merge(., structured)
        .timestamp = parse_timestamp!(.timestamp, "%Y-%m-%d %H:%M:%S")
        del(.file)
        del(.source_type)
        .hostname = del(.host)
        .log_type = "dpkg"
        .project = "local-test"
    process_bash_history:
      type: remap
      inputs: [bash_history]
      source: |-
        structured = parse_regex(.message, r'(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}\+\d{2}:\d{2})\s+(?P<hostname>\S+)\s+Bash_History:\s+(?P<user>\S+)\s+:\s+(?P<user2>\S+)\s+:\s+(?P<path>\S+)\s+-\s+(\d+)\s+(?P<command>.+)') ?? {}
        .hostname = structured.hostname
        .user = structured.user
        del(.file)
        del(.source_type)make
        .log_type = "bash_history"
        .project = "local-test"
    process_k8s:
      type: remap
      inputs:
      - k8s
      source: |-
        .alldata = del(.)
        .container_name = del(.alldata.kubernetes.container_name)
        .pod_data = {
          "name": .alldata.kubernetes.pod_name,
          "namespace": .alldata.kubernetes.pod_namespace
        }
        .message = del(.alldata.message)
        .timestamp = del(.alldata.timestamp)
        .stream = del(.alldata.stream)
        .hostname = .alldata.kubernetes.pod_node_name
        del(.alldata)
        .log_type = "k8s"
        .project = "local-test"
  sinks:
    console:
      inputs:
        - process_k8s
      target: stdout
      type: console
      encoding:
        codec: json
    vlogs:
      inputs: 
      - process_syslog
      - process_auth
      - process_kern
      - process_dmesg
      - process_dpkg
      - process_k8s
      - process_bash_history
      type: "elasticsearch"
      endpoints: [ "https://victorialogs.teamlead.com/insert/elasticsearch/" ]
      auth:
        strategy: basic
        user: local-test
        password: aZX8d60ybkORPmN3Hw94leT5GIsY1E72
      mode: "bulk"
      api_version: "v8"
      healthcheck:
        enabled: false
      query:
        _msg_field: "message"
        _time_field: "timestamp"
        _stream_fields: "hostname,process,source,stream,log_type,user,project,container_name,pod_data"


# Define the Vector image to use.
image:
  repository: timberio/vector
  pullPolicy: IfNotPresent
  tag: 0.38.0-alpine
  sha: ""

rbac:
  # rbac.create -- If true, create and use RBAC resources. Only valid for the "Agent" role.
  create: true
podLabels:
  vector.dev/exclude: "true"

command: []

args:
  - --config-dir
  - "/etc/vector/"

# minReadySeconds -- Specify the minimum number of seconds a newly spun up pod should wait to
# pass healthchecks before it is considered available.
minReadySeconds: 0

terminationGracePeriodSeconds: 60

nodeSelector: {}
  # node-role.kubernetes.io/service: "true"

resources:
  requests:
    memory: "256Mi"
    cpu: "300m"
  limits:
    memory: "500Mi"
    cpu: "400m"

tolerations:
  - key: "node-role.kubernetes.io/worker"
    operator: "Equal"
    value: "true"
    effect: NoSchedule
  - key: "node-role.kubernetes.io/service"
    operator: "Equal"
    value: "true"
    effect: NoSchedule

# Log level for Vector.
logLevel: "info"
